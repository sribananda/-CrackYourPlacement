class Solution {
public:
    string minWindow(string s, string t) {
        int n = s.length();
        if(t.length() > n){
            return "";
        }
        unordered_map<char, int> mp;

        for(char &ch : t){
            mp[ch]++;
        }
        int requiredCount = t.length();
        int i = 0, j = 0;
        int min_window_size = INT_MAX;
        int start_i  = 0;

        //j will search for every character in the string
        while(j < n){
            char ch = s[j];

            if(mp[ch] > 0){
                requiredCount--;
            }
            mp[ch]--;

            while(requiredCount == 0){
                //start shrinking the window
                int currWindowSize = j - i + 1;
                if(min_window_size > currWindowSize){
                    min_window_size = currWindowSize;
                    start_i = i;
                }
                mp[s[i]]++;

                if(mp[s[i]] > 0){
                    requiredCount++;
                }
                i++;
            }
            j++;
        }
        return min_window_size == INT_MAX ? "" : s.substr(start_i, min_window_size);
    }
};
