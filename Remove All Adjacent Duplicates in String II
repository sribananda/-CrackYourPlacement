class Solution {
    public String removeDuplicates(String s, int k) {
        int n = s.length();
        if(n < k) return s;

        Stack<Pair<Character, Integer>> stack = new Stack<>();

        for(int i = 0; i < n; ++i){
            if(stack.isEmpty() || stack.peek().getKey() != s.charAt(i)){
                stack.push(new Pair<>(s.charAt(i), 1));
            }
            else{
                Pair<Character, Integer> prev = stack.pop();
                stack.push(new Pair<>(s.charAt(i), prev.getValue() + 1));
            }

            if (stack.peek().getValue() == k) {
                stack.pop();
            }
        }
        StringBuilder ans = new StringBuilder();
        while (!stack.isEmpty()) {
            Pair<Character, Integer> cur = stack.pop();
            int count = cur.getValue();
            while (count-- > 0) {
                ans.append(cur.getKey());
            }
        }
        
        return ans.reverse().toString();
    }
}
