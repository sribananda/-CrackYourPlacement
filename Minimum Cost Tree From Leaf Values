class Solution {
    public int solve(int[] arr, Map<String, Integer> maxi, int left, int right, int[][] dp) {
        // Leaf node
        if (left == right) {
            return 0;
        }
        if (dp[left][right] != -1) {
            return dp[left][right];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = left; i < right; i++) {
            ans = Math.min(ans,
                maxi.get(left + "," + i) * maxi.get((i + 1) + "," + right) +
                solve(arr, maxi, left, i, dp) +
                solve(arr, maxi, i + 1, right, dp)
            );
        }
        dp[left][right] = ans;
        return ans;
    }
    public int mctFromLeafValues(int[] arr) {
        Map<String, Integer> maxi = new HashMap<>();
        int n = arr.length;
        int[][] dp = new int[n + 1][n + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        for (int i = 0; i < arr.length; i++) {
            maxi.put(i + "," + i, arr[i]);
            for (int j = i + 1; j < arr.length; j++) {
                maxi.put(i + "," + j, Math.max(arr[j], maxi.get(i + "," + (j - 1))));
            }
        }
        return solve(arr, maxi, 0, arr.length - 1, dp);
    }
}
