class Solution {
    List<List<Integer>> result = new ArrayList<>();

    public void twoSum(int[] nums, int target, int i, int j) {
        while (i < j) {
            if (nums[i] + nums[j] > target) {
                j--;
            } else if (nums[i] + nums[j] < target) {
                i++;
            } else {
                // Remove duplicates from either end (i, j)
                while (i < j && nums[i] == nums[i + 1]) i++;
                while (i < j && nums[j] == nums[j - 1]) j--;

                List<Integer> triplet = new ArrayList<>();
                triplet.add(-target);
                triplet.add(nums[i]);
                triplet.add(nums[j]);
                result.add(triplet);
                i++;
                j--;
            }
        }
    }
    public List<List<Integer>> threeSum(int[] nums) {
         int n = nums.length;
        if (n < 3)
            return result;
        result.clear();
        // Sort the input array
        Arrays.sort(nums);
        // Fixing one element: n1
        for (int i = 0; i < n - 2; i++) {
            // Avoid duplicates
            if (i > 0 && nums[i] == nums[i - 1])
                continue;
            int n1 = nums[i];
            int target = -n1;
            twoSum(nums, target, i + 1, n - 1); // Find n2 and n3
        }
        return result;
    }
}
