class Solution {
    ListNode reverseLinkedList(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        ListNode newhead = reverseLinkedList(head.next);
        ListNode front = head.next;
        front.next = head;
        head.next = null;
        return newhead;
    } 
    public boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) return true;
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode newhead = reverseLinkedList(slow.next);
        ListNode first = head;
        ListNode second = newhead;

        while(second != null){
            if(first.val != second.val){
                reverseLinkedList(newhead);
                return false;
            }
            first = first.next;
            second = second.next;
        }
        reverseLinkedList(newhead);
        return true;
    }
}
